#!/usr/bin/env python3

import os, sys, json, time
from subprocess import call

scriptDir = os.path.dirname(os.path.abspath(__file__))

# Request elevated privileges
if os.geteuid() != 0:
   exit("You need to have root privileges to run this script.\nPlease try again, this time using 'sudo'. Exiting.")

print("[Info] Loading config... ", end='')
# Load up config
with open('config.json') as configFile:
  conf = json.load(configFile)

inetInterface = conf['inetInterface']
forwardInterfaces = conf['forwardInterfaces']

dhcpdList = ""
hostapdIface = ""

# Parse config elements
for oInterface in forwardInterfaces:
  dhcpdList += oInterface['interfaceName'] + " "
  if oInterface['wireless']:
    hostapdIface += oInterface['interfaceName'] + " "

dhcpdList = dhcpdList.strip()
hostapdIface = hostapdIface.strip()

if len(hostapdIface.split()) > 1:
  exit("Failed, can't emmit on mor than 1 wireless interfaces.")

print("Done.")

# Enable ip forwarding
call("sysctl -w net.ipv4.ip_forward=1 >/dev/null 2>&1 ", shell=True)
print("[Info] Setuped ip forwarding")

# Copy base template to config
with open('dhcpd-base.conf', 'r') as file :
  dhcpdBase = file.read()

dhcpdConfFile = open('/tmp/dhcpd.conf', 'w')
dhcpdConfFile.write(dhcpdBase)

for oInterface in forwardInterfaces:
  with open('dhcpd-subnet.conf', 'r') as file :
    dhcpdSubnet = file.read()

  # Replaces vars in template & write
  dhcpdSubnet = dhcpdSubnet.replace("<subnet>", oInterface['subNetwork'])
  dhcpdSubnet = dhcpdSubnet.replace("<netmask>", oInterface['netMask'])
  dhcpdSubnet = dhcpdSubnet.replace("<routerip>", oInterface['netAddress'])
  dhcpdSubnet = dhcpdSubnet.replace("<broadcast>", oInterface['broadcast'])
  dhcpdSubnet = dhcpdSubnet.replace("<dns>", oInterface['dns'])
  dhcpdSubnet = dhcpdSubnet.replace("<range-min>", oInterface['netRangeMin'])
  dhcpdSubnet = dhcpdSubnet.replace("<range-max>", oInterface['netRangeMax'])

  dhcpdConfFile.write(dhcpdSubnet)

  # Setup iptables for this interface
  call("iptables -A FORWARD -i " + oInterface['interfaceName'] + " -j ACCEPT", shell=True)
  call("iptables -A FORWARD -o " + oInterface['interfaceName'] + " -j ACCEPT", shell=True)

  # Setup interface
  call(("ip addr flush dev " \
    + oInterface['interfaceName']).split())
  call(("ip addr add " \
    + oInterface['netAddress'] + "/" \
    + oInterface['netMask'] + " broadcast " \
    + oInterface['broadcast'] + " dev " \
    + oInterface['interfaceName']).split())
  call(("ip link set " \
    + oInterface['interfaceName'] \
    + " up").split())

  print("[Info] Setuped " \
  + oInterface['interfaceName'] \
  + " up, with addr " \
  + oInterface['netAddress'] + "/" \
  + oInterface['netMask'] \
  + " to FORWARD")

# Setup MASQUERADE for output
if conf['inetInterface'] != "":
  call("iptables -t nat -A POSTROUTING -o " + conf['inetInterface'] + " -j MASQUERADE", shell=True)
  print("[Info] Setuped " + conf['inetInterface'] + " to MASQUERADE")
else:
  print("[Info] No internet interface was specified, just creating networks")


dhcpdConfFile.close()

# Touch dhcpd.leases
dhcpdLeasesFile = open('/tmp/dhcpd.leases', 'w')
dhcpdLeasesFile.close()

# Load hostapd conf template & open config as 'w' if needed
if hostapdIface != "":
  with open('hostapd-base.conf', 'r') as file :
    hostapdBase = file.read()

  hostapdConfFile = open('/tmp/hostapd.conf', 'w')

  # Set vars in template
  hostapdBase = hostapdBase.replace("<interface>", hostapdIface)
  hostapdBase = hostapdBase.replace("<netdriver>", conf['wifiConfig']['wifiDriver'])
  hostapdBase = hostapdBase.replace("<wifimode>", conf['wifiConfig']['wifiMode'])
  hostapdBase = hostapdBase.replace("<wifichannel>", conf['wifiConfig']['wifiChannel'])
  hostapdBase = hostapdBase.replace("<ssid>", conf['wifiConfig']['apName'])
  hostapdBase = hostapdBase.replace("<passphrase>", conf['wifiConfig']['apPass'])

  hostapdConfFile.write(hostapdBase)
  hostapdConfFile.close()

  # Bypass rfkill
  call("rfkill unblock wifi " + hostapdIface, shell=True)

print("[Info] Successfully generated daemon required files")

# Start dhcpd and hostapd if needed
print("[Info] Starting dhcpd..")
call("dhcpd -cf /tmp/dhcpd.conf -pf " + scriptDir + "/pid/dhcpd.pid -lf /tmp/dhcpd.leases " + dhcpdList + " >/dev/null 2>&1 ", shell=True)
if hostapdIface != "":
  print("[Info] Starting hostapd..")
  call("hostapd -B -P " + scriptDir + "/pid/hostapd.pid /tmp/hostapd.conf >/dev/null 2>&1 ", shell=True)

# Block until stop
try:
  while 1:
    time.sleep(1)
except KeyboardInterrupt:
  # Shuting down servers
  print("")
  print("[Info] Stopping dhcpd..")
  call("pkill -15 -F pid/dhcpd.pid", shell=True)

  if hostapdIface != "":
    print("[Info] Stopping hostapd..")
    call("pkill -15 -F pid/hostapd.pid", shell=True)

  for oInterface in forwardInterfaces:
    # Flush ip
    call(("ip addr flush dev " \
      + oInterface['interfaceName']).split())

    # Down interface
    call(("ip link set " \
      + oInterface['interfaceName'] \
      + " down").split())

    # Flush set iptables
    call("iptables -D FORWARD -i " + oInterface['interfaceName'] + " -j ACCEPT", shell=True)
    call("iptables -D FORWARD -o " + oInterface['interfaceName'] + " -j ACCEPT", shell=True)

  # Flush MASQUERADE
  call("iptables -t nat -D POSTROUTING -o " + conf['inetInterface'] + " -j MASQUERADE", shell=True)
  print("[Info] Successfully flushed created tables..")

  exit(0)
